SELECT USERNAME
FROM ALL_USERS;

-- SELECT *
-- FROM SEQ;

DROP SEQUENCE s1;

-- [] MEANS OPTIONAL IN COMPUTER SCIENCE DAMN!!!
SELECT *
FROM COURSE;

CREATE SEQUENCE S1;

SELECT S1.nextval "NEXT"
FROM DUAL;

SELECT S1.currval "CURRENT"
FROM DUAL;

CREATE SEQUENCE S2
    START WITH 1
    MAXVALUE 20
    INCREMENT BY 2;

SELECT S2.nextval
FROM DUAL;

CREATE SEQUENCE S3
--     START WITH 10
    MINVALUE 1
    MAXVALUE 10
    INCREMENT BY -1;

SELECT S3.nextval
FROM DUAL;

CREATE SEQUENCE STEST
--     START WITH 10
    MINVALUE 9
    MAXVALUE 10
    INCREMENT BY -1;

DROP SEQUENCE STEST;

SELECT STEST.nextval
FROM DUAL;

DROP SEQUENCE S1;

SELECT *
FROM CAT;

-- LET'S START VIEWS NOW!!!!!!!!

SELECT *
FROM CAT;

CREATE VIEW V1 AS
SELECT *
FROM COURSE
WHERE CREDIT > 2;

SELECT *
FROM COURSE;

SELECT *
FROM V1;

CREATE VIEW V2 AS
SELECT CID, CNAME
FROM COURSE;

SELECT *
FROM V2;

INSERT INTO V2
VALUES (107, 'NLP');

DELETE
FROM V2
WHERE CNAME = 'AI';

-- CREATE A READ ONLY VIEW, ON PARTICIPANT TABLE AND FETCH ALL TUPLES FROM BASE TABLE
CREATE VIEW V3 AS
SELECT *
FROM PARTICIPANT
WITH READ ONLY;

SELECT *
FROM V3;

-- WHILE THE SUB-QUERY INSIDE VIEWS USES AN AGGREGATE FUNCTION
CREATE VIEW V4 ("MIN", "MAX")
AS
SELECT MIN(CREDIT), MAX(CREDIT)
FROM COURSE;

SELECT *
FROM V4;

CREATE VIEW V5
AS
SELECT *
FROM PARTICIPANT
WHERE CID = 101;

SELECT *
FROM V5;

CREATE VIEW V6
AS
SELECT PID, PNAME, C.CID, CNAME
FROM COURSE C,
     PARTICIPANT P
WHERE C.CID = P.CID;

SELECT *
FROM V6;